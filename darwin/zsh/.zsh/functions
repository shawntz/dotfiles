# Directory creation and navigation
take() {
    mkdir -p "$1" && cd "$1"
}

# Multi-purpose fzf function
fdo() {
  local file=$(fzf --preview 'bat --style=numbers --color=always {}')
  if [[ -n "$file" ]]; then
    case "$1" in
      edit|e) nvim "$file" ;;
      view|v) bat "$file" ;;
      copy|c) cp "$file" "${2:-.}" ;;
      *) echo "Usage: fdo [edit|view|copy] [destination]" ;;
    esac
  fi
}

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Restow dotfiles
restow() {
  local DOTFILES_ROOT="${DOTFILES_ROOT:-$HOME/Developer/dotfiles/darwin}"
  local TARGET="$HOME"

  if ! command -v stow >/dev/null 2>&1; then
    echo "stow not installed. Install it first (brew install stow / pacman -S stow / apt install stow)."
    return 1
  fi

  echo "Re-stowing dotfiles from $DOTFILES_ROOT into $TARGET…"

  # Go into darwin dotfiles directory
  cd "$DOTFILES_ROOT" || return 1
  find . -name .DS_Store -type f -print -delete

  # Find all directories to stow (excluding install and package directories)
  local packages_to_stow=()
  for dir in */; do
    [[ -d "$dir" && "${dir%/}" != "install" && "${dir%/}" != "packages" ]] && packages_to_stow+=("${dir%/}")
  done

  if [[ ${#packages_to_stow[@]} -eq 0 ]]; then
    echo "No packages found in $DOTFILES_ROOT"
    return 1
  fi

  echo "Found packages: ${packages_to_stow[*]}"

  # Unstow all first to clear stale symlinks
  for pkg in "${packages_to_stow[@]}"; do
    stow -D --target="$TARGET" "$pkg" 2>/dev/null || true
  done

  # Stow all packages with --adopt to handle conflicts
  for pkg in "${packages_to_stow[@]}"; do
    echo "Stowing $pkg..."
    stow --adopt --target="$TARGET" "$pkg"
  done

  echo "✅ Dotfiles re-stowed."
}

# Refresh macos defaults
mac-sync() {
  emulate -L zsh
  set -u
  set -o pipefail

  local repo_default
  repo_default="$(git rev-parse --show-toplevel 2>/dev/null || print -r -- "$HOME/.dotfiles")"

  local REPO="${1:-$repo_default}"
  REPO="$(cd "$REPO" && pwd)"  # Convert to absolute path

  bash "$REPO"/darwin/install/macos/set-defaults.sh
}

# Sync Homebrew state to a Brewfile, commit on a new branch, and open a PR.
# Usage:
#   brewfile-sync                  # uses current repo (or ~/.dotfiles) and Brewfile at repo root
#   brewfile-sync /path/to/repo    # custom repo
#   brewfile-sync /repo /repo/ops/Brewfile   # custom repo + Brewfile location
brewfile-sync() {
  emulate -L zsh
  set -u
  set -o pipefail

  # --- deps ---------------------------------------------------------------
  command -v brew >/dev/null 2>&1 || { echo "brew not found"; return 1; }
  command -v gh   >/dev/null 2>&1 || { echo "gh not found (brew install gh)"; return 1; }

  # Ensure brew is on PATH for this shell
  if [[ -d /opt/homebrew/bin ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -x /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi

  # --- repo + file targets -----------------------------------------------
  local repo_default
  repo_default="$(git rev-parse --show-toplevel 2>/dev/null || print -r -- "$HOME/.dotfiles")"

  local REPO="${1:-$repo_default}"
  REPO="$(cd "$REPO" && pwd)"  # Convert to absolute path
  local BREWFILE="${2:-$REPO/darwin/packages/Brewfile}"

  [[ -d "$REPO/.git" ]] || { echo "Not a git repo: $REPO"; return 1; }
  if ! gh auth status &>/dev/null; then
    echo "gh not authenticated. Launching gh auth login..."
    gh auth login
    if ! gh auth status &>/dev/null; then
      echo "Authentication failed. Please try running 'gh auth login' manually."
      return 1
    fi
  fi

  # --- brew maintenance ---------------------------------------------------
  echo "• brew update / upgrade / cleanup…"
  brew update
  brew upgrade
  brew cleanup -s || true

  # --- dump Brewfile ------------------------------------------------------
  mkdir -p "$(dirname "$BREWFILE")"
  echo "• dumping Brewfile → $BREWFILE"
  brew bundle dump --force --file "$BREWFILE"

  # --- git: branch, commit, push, PR -------------------------------------
  cd "$REPO"

  # discover default base branch
  local BASE
  BASE="$(git remote show origin 2>/dev/null | sed -n 's/.*HEAD branch: //p')"
  [[ -n "${BASE:-}" ]] || BASE=$([[ -n "$(git show-ref refs/heads/main 2>/dev/null)" ]] && echo main || echo master)

  local TS; TS="$(date -u +%Y-%m-%dT%H%M%SZ)"
  local BR="ci/brewfile-${TS}"

  git fetch origin --quiet || true
  git checkout -B "$BR" "$BASE"

  git add -A "$BREWFILE"
  if git diff --cached --quiet; then
    echo "• no changes in Brewfile; nothing to commit."
    git checkout master
    return 0
  fi

  local MSG="[dotbot] chore(brew): update Brewfile ${TS}"
  git commit -m "$MSG"
  git push -u origin "$BR"

  # helpful diagnostics in PR body (non-fatal if they fail)
  local DOCTOR; DOCTOR="$(brew doctor 2>&1 || true)"
  local OUTDATED; OUTDATED="$(brew outdated 2>/dev/null || true)"

  gh pr create \
    --base "$BASE" \
    --head "$BR" \
    --title "$MSG" \
    --body $"Automated Brewfile snapshot on ${TS} (UTC).

**Actions**
- \`brew update && brew upgrade && brew cleanup -s\`
- \`brew bundle dump --force --file ${BREWFILE/#$REPO\//}\`

<details><summary>brew doctor</summary>

\`\`\`
${DOCTOR}
\`\`\`
</details>

<details><summary>brew outdated (after upgrade)</summary>

\`\`\`
${OUTDATED}
\`\`\`
</details>
"

  # Switch back to master branch
  git checkout master
}
